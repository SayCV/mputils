# coding=utf-8
"""
This file is autogenerated by python script @ 20200808-20:13:09
"""
import sys
import os
import datetime,time

#from PowerPCBEnums import *

__author__ = 'SayCV'

import logging

logger = logging.getLogger(__name__)

class IHLScmTline(object):
    def __init__(self, obj=None):
        self.obj = obj


    @property
    def LineType(self):
        return self.obj.LineType

    @property
    def _LineType(self):
        return self.obj._LineType

    @property
    def Z0(self):
        return self.obj.Z0

    @LineType.setter
    def LineType(self, LineType):
        self.obj.LineType=LineType

    @property
    def Delay(self):
        return self.obj.Delay

    @Z0.setter
    def Z0(self, Z0):
        self.obj.Z0=Z0

    @property
    def R(self):
        return self.obj.R

    @Delay.setter
    def Delay(self, Delay):
        self.obj.Delay=Delay

    @property
    def Layer(self):
        return self.obj.Layer

    @R.setter
    def R(self, R):
        self.obj.R=R

    @property
    def Stackup(self):
        return self.obj.Stackup

    @Layer.setter
    def Layer(self, Layer):
        self.obj.Layer=Layer

    @property
    def Length(self):
        return self.obj.Length

    @Stackup.setter
    def Stackup(self, Stackup):
        self.obj.Stackup=Stackup

    @property
    def Width(self):
        return self.obj.Width

    @Length.setter
    def Length(self, Length):
        self.obj.Length=Length

    @property
    def Thickness(self):
        return self.obj.Thickness

    @Width.setter
    def Width(self, Width):
        self.obj.Width=Width

    @property
    def Plating(self):
        return self.obj.Plating

    @Thickness.setter
    def Thickness(self, Thickness):
        self.obj.Thickness=Thickness

    @property
    def DielAboveHeight(self):
        return self.obj.DielAboveHeight

    @Plating.setter
    def Plating(self, Plating):
        self.obj.Plating=Plating

    @property
    def DielBelowHeight(self):
        return self.obj.DielBelowHeight

    @DielAboveHeight.setter
    def DielAboveHeight(self, DielAboveHeight):
        self.obj.DielAboveHeight=DielAboveHeight

    @property
    def DielConstant(self):
        return self.obj.DielConstant

    @DielBelowHeight.setter
    def DielBelowHeight(self, DielBelowHeight):
        self.obj.DielBelowHeight=DielBelowHeight

    @property
    def LossTangent(self):
        return self.obj.LossTangent

    @DielConstant.setter
    def DielConstant(self, DielConstant):
        self.obj.DielConstant=DielConstant

    @property
    def SolderMaskHeight(self):
        return self.obj.SolderMaskHeight

    @LossTangent.setter
    def LossTangent(self, LossTangent):
        self.obj.LossTangent=LossTangent

    @property
    def SolderMaskDielConstant(self):
        return self.obj.SolderMaskDielConstant

    @SolderMaskHeight.setter
    def SolderMaskHeight(self, SolderMaskHeight):
        self.obj.SolderMaskHeight=SolderMaskHeight

    @property
    def BulkResistivity(self):
        return self.obj.BulkResistivity

    @SolderMaskDielConstant.setter
    def SolderMaskDielConstant(self, SolderMaskDielConstant):
        self.obj.SolderMaskDielConstant=SolderMaskDielConstant

    @property
    def TemperatureCoef(self):
        return self.obj.TemperatureCoef

    @BulkResistivity.setter
    def BulkResistivity(self, BulkResistivity):
        self.obj.BulkResistivity=BulkResistivity

    @property
    def HatchWidth(self):
        return self.obj.HatchWidth

    @TemperatureCoef.setter
    def TemperatureCoef(self, TemperatureCoef):
        self.obj.TemperatureCoef=TemperatureCoef

    @property
    def HatchPitch(self):
        return self.obj.HatchPitch

    @HatchWidth.setter
    def HatchWidth(self, HatchWidth):
        self.obj.HatchWidth=HatchWidth

    @property
    def HatchAngle(self):
        return self.obj.HatchAngle

    @HatchPitch.setter
    def HatchPitch(self, HatchPitch):
        self.obj.HatchPitch=HatchPitch

    @property
    def HatchOffset(self):
        return self.obj.HatchOffset

    @HatchAngle.setter
    def HatchAngle(self, HatchAngle):
        self.obj.HatchAngle=HatchAngle

    @HatchOffset.setter
    def HatchOffset(self, HatchOffset):
        self.obj.HatchOffset=HatchOffset

